{"name":"Interpol","tagline":"Templates Sans Facial Hair","body":"Interpol is an HTML Templating System\r\n\r\n[![GitHub version](https://badge.fury.io/gh/kode4food%2Finterpol.png)](http://badge.fury.io/gh/kode4food%2Finterpol) [![Build Status](https://travis-ci.org/kode4food/interpol.png?branch=master)](https://travis-ci.org/kode4food/interpol)\r\n\r\n<img src=\"images/logo-small.png\" style=\"margin-left: 20px;\" align=\"right\">There are a lot of templating systems out there and they're all similar.  In truth, Interpol isn't so different, which might beg the question:\r\n\r\n<pre>Why the hell another templating system?</pre>\r\n\r\nThe answer is simple.  I'm sick of looking at a template and feeling as though coding takes a back-seat to presentation.  The two roles seem to have blurred completely in recent years, so why the distinction?  I'm also sick of looking at a template and being unable to read the thing, even if it's one that I wrote yesterday.  That's why I developed Interpol.\r\n\r\nThat said, Interpol's goals are modest:\r\n\r\n  * Provide easy to read/write templates that operate against JSON data\r\n  * Work well in both Node.js and the Browser\r\n  * Focus on an experience that favors dynamic content creation\r\n\r\nThis last goal is important because the templates we're creating are often devoid of static content.  So why must we 'escape' into a dynamic content mode using braces or processing instructions?  Why don't we just start in that mode and stay there?\r\n\r\n```html\r\n<html>\r\n  <head>\r\n    <title>\"a static title\"</title>\r\n  </head>\r\n  <body>\r\n    \"this is a list with %length items\" % list\r\n    <ul>\r\n    for item in list\r\n      <li class=item.type id=\"id-%id\" % item>\r\n        item.name\r\n      </li>\r\n    end\r\n    </ul>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThe only static element on this page was its title, and usually even that isn't static.  So what did we do to escape *it* for static rendering?  We wrapped it in quotes.  The rest of the page was a clean mixture of HTMLish elements and dynamic content.\r\n\r\nI say 'HTMLish' because it's not pure HTML.  The values of attributes are also evaluated.  For example:\r\n\r\n```html\r\n<li class=item.type id=\"id-%id\" % item>\r\n```\r\n\r\n`class=item.type` outputs a class attribute whose value is taken from the item.type property.  `id=\"id-%\" % item.id` outputs an id attribute whose value is interpolated from the item.id property.\r\n\r\nThat's all well and good, but what about the ability to reuse templates?  Well, to do that you define partials:\r\n\r\n```html\r\ndef renderItem(item)\r\n  <li class=item.type id=\"id-%id\" % item>\r\n    item.name\r\n  </li>\r\nend\r\n\r\ndef renderList(list)\r\n  <ul>\r\n  for item in list\r\n    renderItem(item)\r\n  end\r\n  </ul>\r\nend\r\n\r\n<html>\r\n  <head>\r\n    <title>\"a static title\"</title>\r\n  </head>\r\n  <body>\r\n    \"this is a list with %length items\" % list\r\n    renderList(list)\r\n  </body>\r\n</html>\r\n```\r\n\r\nWhat if you use these partials in multiple templates?  Then you can move them out into their own module called `mystuff.int`\r\n\r\n```html\r\n# this is mystuff.int\r\n\r\ndef renderItem(item)\r\n  <li class=item.type id=\"id-%id\" % item>\r\n    item.name\r\n  </li>\r\nend\r\n\r\ndef renderList(list)\r\n  <ul>\r\n  for item in list\r\n    renderItem(item)\r\n  end\r\n  </ul>\r\nend\r\n```\r\n\r\nAnd import them like so:\r\n\r\n```html\r\nfrom mystuff import renderList\r\n\r\n<html>\r\n  <head>\r\n    <title>\"a static title\"</title>\r\n  </head>\r\n  <body>\r\n    \"this is a list with %length items\" % list\r\n    renderList(list)\r\n  </body>\r\n</html>\r\n```\r\n\r\n## Resources\r\n\r\nFor the latest releases, please see the [Interpol GitHub Page](https://github.com/kode4food/interpol)\r\n\r\nTo install from NPM (Node Package Manager), type `npm install interpol`\r\n\r\nFor more information about how to use Interpol, please see the [API Reference](https://github.com/kode4food/interpol/blob/master/doc/API_Reference.md)\r\n or the [README](https://github.com/kode4food/interpol/blob/master/README.md)\r\n\r\nFor more information about the language itself, please see the [Language Reference](https://github.com/kode4food/interpol/blob/master/doc/Language_Reference.md)\r\n\r\nFor a brief introduction to Interpol and its motivations, see this [Presentation](http://slid.es/kode4food/interpol-intro)\r\n\r\nTo play around with Interpol, go to the [JSFiddle Example](http://jsfiddle.net/kode4food/Py2xq/)","google":"UA-48815197-1","note":"Don't delete this file! It's used internally to help with page regeneration."}